/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kienast.rest.api;

import com.kienast.rest.api.model.ImageRequestModel;
import com.kienast.rest.api.model.ImageResponseModel;
import com.kienast.rest.api.model.InstanceTypeResponseModel;
import com.kienast.rest.api.model.KeyPairRequestModel;
import com.kienast.rest.api.model.KeyPairResponseFullListModel;
import com.kienast.rest.api.model.KeyPairResponseModel;
import com.kienast.rest.api.model.SecurityGroupNameRequestModel;
import com.kienast.rest.api.model.SecurityGroupRequestModel;
import com.kienast.rest.api.model.SecurityGroupResponseFullListModel;
import com.kienast.rest.api.model.SecurityGroupResponseModel;
import com.kienast.rest.api.model.StateModel;
import com.kienast.rest.api.model.VMRequestModel;
import com.kienast.rest.api.model.VMResponseFullistModel;
import com.kienast.rest.api.model.VMResponseModel;
import com.kienast.rest.api.model.VPCIdRequestModel;
import com.kienast.rest.api.model.VPCListResponseModel;
import com.kienast.rest.api.model.VPCRequestModel;
import com.kienast.rest.api.model.VPCResponseModel;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "aws", description = "the aws API")
public interface AwsApi {

    @ApiOperation(value = "Creates a VPC", nickname = "awsVpcCreateVPC", notes = "Creates a VPC", response = VPCResponseModel.class, tags={ "AWS-vpc", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful created vpc", response = VPCResponseModel.class) })
    @RequestMapping(value = "/aws/vpc",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<VPCResponseModel> awsVpcCreateVPC(@ApiParam(value = "" ,required=true )  @Valid @RequestBody VPCRequestModel vpCRequestModel);


    @ApiOperation(value = "Create an EC2 (VM)", nickname = "awscreateVM", notes = "Create an EC2 (VM)", response = VMResponseModel.class, tags={ "AWS-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful created VM", response = VMResponseModel.class) })
    @RequestMapping(value = "/aws/vm",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<VMResponseModel> awscreateVM(@ApiParam(value = "" ,required=true )  @Valid @RequestBody VMRequestModel vmRequestModel);


    @ApiOperation(value = "Deletes a Keypair", nickname = "awsdeleteKeyPair", notes = "Deletes the provided keypair", tags={ "AWS-keypair", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deleted keypair") })
    @RequestMapping(value = "/aws/keypair",
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> awsdeleteKeyPair(@ApiParam(value = "" ,required=true )  @Valid @RequestBody KeyPairRequestModel keyPairRequestModel);


    @ApiOperation(value = "Deletes a securitygroup", nickname = "awsdeleteSecurityGroup", notes = "Deletes the provided securitygroup", tags={ "AWS-securitygroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deleted securitygroup") })
    @RequestMapping(value = "/aws/securitygroup",
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> awsdeleteSecurityGroup(@ApiParam(value = "" ,required=true )  @Valid @RequestBody SecurityGroupNameRequestModel securityGroupNameRequestModel);


    @ApiOperation(value = "Deletes an EC2 (VM)", nickname = "awsdeleteVM", notes = "Deletes an EC2 (VM)", tags={ "AWS-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deleted VM") })
    @RequestMapping(value = "/aws/vm",
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> awsdeleteVM(@ApiParam(value = "" ,required=true )  @Valid @RequestBody VMResponseModel vmResponseModel);


    @ApiOperation(value = "Deletes a VPC", nickname = "awsdeleteVPC", notes = "Deletes a VPC", tags={ "AWS-vpc", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deleted vpc") })
    @RequestMapping(value = "/aws/vpc",
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> awsdeleteVPC(@ApiParam(value = "" ,required=true )  @Valid @RequestBody VPCIdRequestModel vpCIdRequestModel);


    @ApiOperation(value = "Loads all Keypairs", nickname = "awsgetAllKeypairs", notes = "Loads all Keypairs", response = KeyPairResponseFullListModel.class, tags={ "AWS-keypair", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful loaded all keypairs", response = KeyPairResponseFullListModel.class) })
    @RequestMapping(value = "/aws/keypair",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<KeyPairResponseFullListModel> awsgetAllKeypairs();


    @ApiOperation(value = "Get the VM based on provided instanceId", nickname = "awsgetVM", notes = "Get the VM based on provided instanceId", response = VMResponseModel.class, tags={ "AWS-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read VM", response = VMResponseModel.class) })
    @RequestMapping(value = "/aws/vm/{instanceId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VMResponseModel> awsgetVM(@ApiParam(value = "InstanceId",required=true) @PathVariable("instanceId") String instanceId);


    @ApiOperation(value = "Loads all SecurityGroups", nickname = "awsloadAllSecurityGroups", notes = "Loads all SecurityGroupssecuritygroup", response = SecurityGroupResponseFullListModel.class, tags={ "AWS-securitygroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful loaded all SecurityGroups", response = SecurityGroupResponseFullListModel.class) })
    @RequestMapping(value = "/aws/securitygroup",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SecurityGroupResponseFullListModel> awsloadAllSecurityGroups();


    @ApiOperation(value = "Loads All VMs", nickname = "awsloadAllVM", notes = "Loads all VMS", response = VMResponseFullistModel.class, tags={ "AWS-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful loaded all VM", response = VMResponseFullistModel.class) })
    @RequestMapping(value = "/aws/vm",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VMResponseFullistModel> awsloadAllVM();


    @ApiOperation(value = "The image data structure supported by aws", nickname = "awsloadImages", notes = "Read the list of amazon images", response = ImageResponseModel.class, tags={ "AWS-image", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read image list operation", response = ImageResponseModel.class) })
    @RequestMapping(value = "/aws/image",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ImageResponseModel> awsloadImages(@ApiParam(value = ""  )  @Valid @RequestBody ImageRequestModel imageRequestModel);


    @ApiOperation(value = "The instancetypes supported by aws", nickname = "awsloadInstanceType", notes = "Read the list of aws instancetypes", response = InstanceTypeResponseModel.class, tags={ "AWS-instancetype", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read instancetypes", response = InstanceTypeResponseModel.class) })
    @RequestMapping(value = "/aws/types",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InstanceTypeResponseModel> awsloadInstanceType();


    @ApiOperation(value = "The instancetypes supported by aws", nickname = "awsloadInstanceTypeWithMemory", notes = "Read the list of aws instancetypes", response = InstanceTypeResponseModel.class, tags={ "AWS-instancetype", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read instancetypes", response = InstanceTypeResponseModel.class) })
    @RequestMapping(value = "/aws/types/{maxMemory}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InstanceTypeResponseModel> awsloadInstanceTypeWithMemory(@ApiParam(value = "",required=true) @PathVariable("maxMemory") String maxMemory);


    @ApiOperation(value = "Create or Load a Keypair", nickname = "awsloadOrCreateKeyPair", notes = "Creates or loads the provided keypair", response = KeyPairResponseModel.class, tags={ "AWS-keypair", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read or created keypair", response = KeyPairResponseModel.class) })
    @RequestMapping(value = "/aws/keypair",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<KeyPairResponseModel> awsloadOrCreateKeyPair(@ApiParam(value = "" ,required=true )  @Valid @RequestBody KeyPairRequestModel keyPairRequestModel);


    @ApiOperation(value = "Create or Load a securitygroup", nickname = "awsloadOrCreateSecurityGroup", notes = "Creates or loads the provided securitygroup", response = SecurityGroupResponseModel.class, tags={ "AWS-securitygroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read or created securitygroup", response = SecurityGroupResponseModel.class) })
    @RequestMapping(value = "/aws/securitygroup",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SecurityGroupResponseModel> awsloadOrCreateSecurityGroup(@ApiParam(value = "" ,required=true )  @Valid @RequestBody SecurityGroupRequestModel securityGroupRequestModel);


    @ApiOperation(value = "Create or Load a securitygroup with Authorization", nickname = "awsloadOrCreateSecurityGroupWithAuthorization", notes = "Creates or loads the provided securitygroup  with Authorization", response = SecurityGroupResponseModel.class, tags={ "AWS-securitygroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read or created securitygroup", response = SecurityGroupResponseModel.class) })
    @RequestMapping(value = "/aws/securitygroupWithAuthorization",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SecurityGroupResponseModel> awsloadOrCreateSecurityGroupWithAuthorization(@ApiParam(value = "" ,required=true )  @Valid @RequestBody SecurityGroupRequestModel securityGroupRequestModel);


    @ApiOperation(value = "Load all VPCs in Account", nickname = "awsloadVPCs", notes = "Load all VPCs in Account", response = VPCListResponseModel.class, tags={ "AWS-vpc", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read vpcs", response = VPCListResponseModel.class) })
    @RequestMapping(value = "/aws/vpc",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VPCListResponseModel> awsloadVPCs();


    @ApiOperation(value = "Starts the VM based on provided instanceId", nickname = "awsstartVM", notes = "Starts the VM based on provided instanceId", response = StateModel.class, tags={ "AWS-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful started VM", response = StateModel.class) })
    @RequestMapping(value = "/aws/vm/{instanceId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<StateModel> awsstartVM(@ApiParam(value = "InstanceId",required=true) @PathVariable("instanceId") String instanceId);


    @ApiOperation(value = "stop the VM based on provided instanceId", nickname = "awsstopVM", notes = "stop the VM based on provided instanceId", response = StateModel.class, tags={ "AWS-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful stopped VM", response = StateModel.class) })
    @RequestMapping(value = "/aws/vm/{instanceId}",
        produces = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<StateModel> awsstopVM(@ApiParam(value = "InstanceId",required=true) @PathVariable("instanceId") String instanceId);

}
