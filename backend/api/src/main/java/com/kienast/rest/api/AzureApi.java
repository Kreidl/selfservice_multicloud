/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kienast.rest.api;

import com.kienast.rest.api.model.AzureInstanceTypeResponseModel;
import com.kienast.rest.api.model.AzureVMRequestModel;
import com.kienast.rest.api.model.AzureVMResponseModel;
import com.kienast.rest.api.model.DeleteNetworkRequestModel;
import com.kienast.rest.api.model.NICRequestModel;
import com.kienast.rest.api.model.NICResponseModel;
import com.kienast.rest.api.model.NetworkListRequestModel;
import com.kienast.rest.api.model.NetworkRequestModel;
import com.kienast.rest.api.model.NetworkResponseModel;
import com.kienast.rest.api.model.OfferRequestModel;
import com.kienast.rest.api.model.ResourceGroupRequestModel;
import com.kienast.rest.api.model.ResourceGroupResponseModel;
import com.kienast.rest.api.model.SkuRequestModel;
import com.kienast.rest.api.model.SubnetModel;
import com.kienast.rest.api.model.SubnetRequestModel;
import com.kienast.rest.api.model.VMSmallRequestModel;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "azure", description = "the azure API")
public interface AzureApi {

    @ApiOperation(value = "Creates or Updates a NIC", nickname = "azureCreateOrUpdateNic", notes = "Creates or Updates a NIC", response = NICResponseModel.class, tags={ "AZURE-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful created NIC", response = NICResponseModel.class) })
    @RequestMapping(value = "/azure/nic",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<NICResponseModel> azureCreateOrUpdateNic(@ApiParam(value = "" ,required=true )  @Valid @RequestBody NICRequestModel niCRequestModel);


    @ApiOperation(value = "Creates a Network", nickname = "azurecreateANetwork", notes = "Creates a Network", response = NetworkResponseModel.class, tags={ "AZURE-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful created network", response = NetworkResponseModel.class) })
    @RequestMapping(value = "/azure/network",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<NetworkResponseModel> azurecreateANetwork(@ApiParam(value = "" ,required=true )  @Valid @RequestBody NetworkRequestModel networkRequestModel);


    @ApiOperation(value = "Creates or Updates a ResourceGroup", nickname = "azurecreateOrUpdateResourceGroup", notes = "Creates or Updates a ResourceGroup", response = ResourceGroupResponseModel.class, tags={ "AZURE-resourcegroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful created ResourceGroup", response = ResourceGroupResponseModel.class) })
    @RequestMapping(value = "/azure/resource",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ResourceGroupResponseModel> azurecreateOrUpdateResourceGroup(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ResourceGroupRequestModel resourceGroupRequestModel);


    @ApiOperation(value = "Creates or Updates a Subnet", nickname = "azurecreateOrUpdateSubnet", notes = "Creates or Updates a Subnet", response = SubnetModel.class, tags={ "AZURE-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful created subnet", response = SubnetModel.class) })
    @RequestMapping(value = "/azure/subnet",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SubnetModel> azurecreateOrUpdateSubnet(@ApiParam(value = "" ,required=true )  @Valid @RequestBody SubnetRequestModel subnetRequestModel);


    @ApiOperation(value = "Creates a VM", nickname = "azurecreateaVM", notes = "Creates a VM", response = AzureVMResponseModel.class, tags={ "AZURE-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful created VM", response = AzureVMResponseModel.class) })
    @RequestMapping(value = "/azure/vm",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AzureVMResponseModel> azurecreateaVM(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AzureVMRequestModel azureVMRequestModel);


    @ApiOperation(value = "Deletes a Network", nickname = "azuredeleteNetwork", notes = "Deletes a Network", tags={ "AZURE-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deleted Network") })
    @RequestMapping(value = "/azure/network",
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> azuredeleteNetwork(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DeleteNetworkRequestModel deleteNetworkRequestModel);


    @ApiOperation(value = "deletes a resourcegroup from azure", nickname = "azuredeleteResourceGroup", notes = "deletes a resourcegroup from azure", tags={ "AZURE-resourcegroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deleted ResourceGroup") })
    @RequestMapping(value = "/azure/resource",
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> azuredeleteResourceGroup(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ResourceGroupRequestModel resourceGroupRequestModel);


    @ApiOperation(value = "deletes a vm from azure", nickname = "azuredeleteVM", notes = "deletes a vm from azure", tags={ "AZURE-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deleted VM") })
    @RequestMapping(value = "/azure/vm",
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> azuredeleteVM(@ApiParam(value = "" ,required=true )  @Valid @RequestBody VMSmallRequestModel vmSmallRequestModel);


    @ApiOperation(value = "get all NICs", nickname = "azuregetALLNIC", notes = "get all NICs", response = NICResponseModel.class, tags={ "AZURE-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read NIC", response = NICResponseModel.class) })
    @RequestMapping(value = "/azure/nic",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<NICResponseModel> azuregetALLNIC(@ApiParam(value = "" ,required=true )  @Valid @RequestBody NetworkListRequestModel networkListRequestModel);


    @ApiOperation(value = "Get a network from azure", nickname = "azuregetANetwork", notes = "Get a network from azure", response = NetworkResponseModel.class, tags={ "AZURE-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read Network", response = NetworkResponseModel.class) })
    @RequestMapping(value = "/azure/network/{networkName}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<NetworkResponseModel> azuregetANetwork(@ApiParam(value = "networkName",required=true) @PathVariable("networkName") String networkName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody NetworkListRequestModel networkListRequestModel);


    @ApiOperation(value = "Get a resourcegroup from azure", nickname = "azuregetAResourceGroup", notes = "Get a resourcegroup from azure", response = ResourceGroupResponseModel.class, tags={ "AZURE-resourcegroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read ResourceGroup", response = ResourceGroupResponseModel.class) })
    @RequestMapping(value = "/azure/resource/{groupName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResourceGroupResponseModel> azuregetAResourceGroup(@ApiParam(value = "groupName",required=true) @PathVariable("groupName") String groupName);


    @ApiOperation(value = "gets all Networks", nickname = "azuregetAllNetworks", notes = "gets all Networks", response = NetworkResponseModel.class, tags={ "AZURE-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful created network", response = NetworkResponseModel.class) })
    @RequestMapping(value = "/azure/network",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<NetworkResponseModel> azuregetAllNetworks(@ApiParam(value = "" ,required=true )  @Valid @RequestBody NetworkListRequestModel networkListRequestModel);


    @ApiOperation(value = "The offers provided by azure based on publisher", nickname = "azuregetAllOffersForPub", notes = "The offers provided by azure based on publisher", response = Object.class, responseContainer = "List", tags={ "AZURE-image", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read offers", response = Object.class, responseContainer = "List") })
    @RequestMapping(value = "/azure/image",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<Object>> azuregetAllOffersForPub(@ApiParam(value = "" ,required=true )  @Valid @RequestBody OfferRequestModel offerRequestModel);


    @ApiOperation(value = "The publishers provided by azure", nickname = "azuregetAllPublishers", notes = "The publishers provided by azure", response = Object.class, responseContainer = "List", tags={ "AZURE-image", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read providers", response = Object.class, responseContainer = "List") })
    @RequestMapping(value = "/azure/image",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Object>> azuregetAllPublishers();


    @ApiOperation(value = "Gets all ResourceGroups", nickname = "azuregetAllResourceGroups", notes = "Gets all ResourceGroups", response = ResourceGroupResponseModel.class, responseContainer = "List", tags={ "AZURE-resourcegroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read ResourceGroups", response = ResourceGroupResponseModel.class, responseContainer = "List") })
    @RequestMapping(value = "/azure/resource",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ResourceGroupResponseModel>> azuregetAllResourceGroups();


    @ApiOperation(value = "The skus provided by azure based on publisher and offer", nickname = "azuregetAllSkusForimage", notes = "The skus provided by azure based on publisher and offer", response = Object.class, responseContainer = "List", tags={ "AZURE-image", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read skus", response = Object.class, responseContainer = "List") })
    @RequestMapping(value = "/azure/image",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<List<Object>> azuregetAllSkusForimage(@ApiParam(value = "" ,required=true )  @Valid @RequestBody SkuRequestModel skuRequestModel);


    @ApiOperation(value = "The instancetypes provided by azure", nickname = "azuregetAllTypes", notes = "The instancetypes provided by azure", response = AzureInstanceTypeResponseModel.class, responseContainer = "List", tags={ "AZURE-Instancetypes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read instancetypes", response = AzureInstanceTypeResponseModel.class, responseContainer = "List") })
    @RequestMapping(value = "/azure/types",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AzureInstanceTypeResponseModel>> azuregetAllTypes();


    @ApiOperation(value = "gets all VMs", nickname = "azuregetAllVMS", notes = "gets all VMs", response = AzureVMResponseModel.class, responseContainer = "List", tags={ "AZURE-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read VMs", response = AzureVMResponseModel.class, responseContainer = "List") })
    @RequestMapping(value = "/azure/vm",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<List<AzureVMResponseModel>> azuregetAllVMS(@ApiParam(value = "" ,required=true )  @Valid @RequestBody NetworkListRequestModel networkListRequestModel);


    @ApiOperation(value = "Get a VM from azure", nickname = "azuregetaVM", notes = "Get a VM from azure", response = AzureVMResponseModel.class, tags={ "AZURE-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful read VM", response = AzureVMResponseModel.class) })
    @RequestMapping(value = "/azure/vm/{vmName}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<AzureVMResponseModel> azuregetaVM(@ApiParam(value = "vmName",required=true) @PathVariable("vmName") String vmName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody NetworkListRequestModel networkListRequestModel);


    @ApiOperation(value = "starts a VM", nickname = "azurestartVM", notes = "starts a VM", tags={ "AZURE-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful started VM") })
    @RequestMapping(value = "/azure/vm",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> azurestartVM(@ApiParam(value = "" ,required=true )  @Valid @RequestBody VMSmallRequestModel vmSmallRequestModel);


    @ApiOperation(value = "stops a VM", nickname = "azurestopVM", notes = "stops a VM", tags={ "AZURE-vm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful stopped VM") })
    @RequestMapping(value = "/azure/vm/stop",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> azurestopVM(@ApiParam(value = "" ,required=true )  @Valid @RequestBody VMSmallRequestModel vmSmallRequestModel);

}
